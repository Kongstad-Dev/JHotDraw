# .github/workflows/main.yml

name: JHotDraw Pipeline

on:
  push:
    branches: [ "develop" ]
  pull_request:
    branches: [ "develop" ]


jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'adopt'
  
  linting:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'adopt'
    - name: Run Checkstyle (Java Linter)
      run: mvn checkstyle:check

  
  code-coverage:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'adopt'
    - name: Generate code coverage report
      run: mvn jacoco:report --batch-mode --no-transfer-progress

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
          files: ./target/site/jacoco/jacoco.xml
          fail_ci_if_error: true
          verbose: true
  
  test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'adopt'
    - name: Run unit tests with Maven
      run: mvn test --batch-mode --no-transfer-progress
  
  static-analysis:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'adopt'
    - name: Run SpotBugs analysis
      run: mvn com.github.spotbugs:spotbugs-maven-plugin:check --batch-mode --no-transfer-progress
    

  validate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Validate Commit Messages
        run: |
          PROHIBITED_WORDS = "Bitches | Bomba | Bombaclaat | Fuck | Shit" 
          REQUIRED_WORDS = " fixed | Changed | cleaned up"
          
           # Get commit messages
          COMMITS=$(git log --format=%s ${{ github.event.before }}..${{ github.sha }})
          
          
          # Initialize error flag
          ERROR_FLAG=0
          
          # Check for prohibited words
               echo "Checking for prohibited words..."
               for WORD in $(echo $PROHIBITED_WORDS | tr "|" "\n"); do
               if echo "$COMMITS" | grep -E "$WORD" > /dev/null; then
               echo "Commit message contains prohibited word: $WORD"
               ERROR_FLAG=1
               fi
               done
          
          
          # Check for required words
          echo "Checking for required words..."
          if ! echo "$COMMITS" | grep -E "$REQUIRED_WORDS" > /dev/null; then
            echo "Commit message must contain one of the following words: $REQUIRED_WORDS"
            ERROR_FLAG=1
          fi
          
          # Exit with error if needed
               if [ $ERROR_FLAG -ne 0 ]; then
               echo "Commit message validation failed."
               exit 1
               fi
               
               echo "Commit messages are valid."
        shell: /usr/bin/bash